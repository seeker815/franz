#!/usr/bin/env ruby
# @author Sean Clemmer
require 'thread'
require 'bunny'
require 'franz'

Thread.abort_on_exception = true

configs = [{
  type: :a,
  includes: %w[ test.a.log ],
}, {
  type: :b,
  includes: %w[ test.b.log ],
}, {
  type: :c,
  includes: %w[ test.c.log ],
}, {
  type: :d,
  includes: %w[ test.d.log ],
}]

input = Queue.new

Franz::Input.new queue: input, configs: configs

START = Time.now
LIMIT = ARGV.first.to_i
# i = 0
# until i == LIMIT
#   input.shift
#   i += 1
# end
Franz::Output.new(input: input, limit: LIMIT).join
ELAPSED = Time.now - START

$stderr.puts 'num events: %d [E]' % LIMIT
$stderr.puts 'time elapsed: %.2f [s]' % ELAPSED
$stderr.puts 'throughput: %.1f [E/s]' % [ LIMIT / ELAPSED ]